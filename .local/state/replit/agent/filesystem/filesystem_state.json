{"file_contents":{"README.md":{"content":"# Afk Bot\n<p align=\"center\"> \n    <img src=\"https://img.shields.io/github/issues/urfate/afk-bot\">\n    <img src=\"https://img.shields.io/github/forks/urfate/afk-bot\">\n    <img src=\"https://img.shields.io/github/stars/urfate/afk-bot\">\n    <img src=\"https://img.shields.io/github/license/urfate/afk-bot\">\n</p>\n\n<p align=\"center\">\n    Functional minecraft AFK bot for servers\n</p>\n\n<p align=\"center\">\n    Anti-AFK, Auto-Auth, Microsoft/Offline accounts support.\n</p>\n\n## Tutorial\n\n1. Please Watch This Quick 3 Minute Video [HERE](https://www.youtube.com/watch?v=92khf57AfpE) And Consider Subscribing.\n2. For Any Questions Please Join My Discord Server And Create a Ticket. [HERE](https://discord.gg/MgfBNqxSA9)\n3. Fork The Code by pressing on the top Right.\n4. Like the Code So I can Keep Updating it!\n\n## Installation\n\n 1. [Download](https://github.com/urFate/Afk-Bot/tags) the latest package.\n 2. Download & install [Node.JS](https://nodejs.org/en/download/)\n 3. Run `npm install` command in bot directory.\n \n ## Usage\n \n 1. Configure bot in `settings.json` file. [Bot configuration is explained in our wiki](https://urfate.gitbook.io/afk-bot/bot-configuration)\n 2. Start bot with `node .` command.\n\n## Features\n\n - Anti-AFK Kick Module\n - Move to target block after join\n - Mojang/Microsoft Account support\n - Chat log\n - Chat messages Module\n - Auto reconnect\n - Authentication with Login Security [HERE](https://aternos.org/addons/a/spigot/19362) (Authentication Plugin For Cracked Servers)\n - Supported server versions: `1.8 - 1.21.3`\n\n","size_bytes":1537},"index.js":{"content":"const mineflayer = require('mineflayer');\nconst Movements = require('mineflayer-pathfinder').Movements;\nconst pathfinder = require('mineflayer-pathfinder').pathfinder;\nconst { GoalBlock } = require('mineflayer-pathfinder').goals;\n\nconst config = require('./settings.json');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Bot has arrived');\n});\n\napp.listen(8000, () => {\n  console.log('Server started');\n});\n\nfunction createBot() {\n   const bot = mineflayer.createBot({\n      username: config['bot-account']['username'],\n      password: config['bot-account']['password'],\n      auth: config['bot-account']['type'],\n      host: config.server.ip,\n      port: config.server.port,\n      version: config.server.version,\n   });\n\n   bot.loadPlugin(pathfinder);\n   const mcData = require('minecraft-data')(bot.version);\n   const defaultMove = new Movements(bot, mcData);\n   bot.settings.colorsEnabled = false;\n\n   let pendingPromise = Promise.resolve();\n\n   function sendRegister(password) {\n      return new Promise((resolve, reject) => {\n         bot.chat(`/register ${password} ${password}`);\n         console.log(`[Auth] Sent /register command.`);\n\n         bot.once('chat', (username, message) => {\n            console.log(`[ChatLog] <${username}> ${message}`); // Log all chat messages\n\n            // Check for various possible responses\n            if (message.includes('successfully registered')) {\n               console.log('[INFO] Registration confirmed.');\n               resolve();\n            } else if (message.includes('already registered')) {\n               console.log('[INFO] Bot was already registered.');\n               resolve(); // Resolve if already registered\n            } else if (message.includes('Invalid command')) {\n               reject(`Registration failed: Invalid command. Message: \"${message}\"`);\n            } else {\n               reject(`Registration failed: unexpected message \"${message}\".`);\n            }\n         });\n      });\n   }\n\n   function sendLogin(password) {\n      return new Promise((resolve, reject) => {\n         bot.chat(`/login ${password}`);\n         console.log(`[Auth] Sent /login command.`);\n\n         bot.once('chat', (username, message) => {\n            console.log(`[ChatLog] <${username}> ${message}`); // Log all chat messages\n\n            if (message.includes('successfully logged in')) {\n               console.log('[INFO] Login successful.');\n               resolve();\n            } else if (message.includes('Invalid password')) {\n               reject(`Login failed: Invalid password. Message: \"${message}\"`);\n            } else if (message.includes('not registered')) {\n               reject(`Login failed: Not registered. Message: \"${message}\"`);\n            } else {\n               reject(`Login failed: unexpected message \"${message}\".`);\n            }\n         });\n      });\n   }\n\n   bot.once('spawn', () => {\n      console.log('\\x1b[33m[AfkBot] Bot joined the server', '\\x1b[0m');\n\n      if (config.utils['auto-auth'].enabled) {\n         console.log('[INFO] Started auto-auth module');\n\n         const password = config.utils['auto-auth'].password;\n\n         pendingPromise = pendingPromise\n            .then(() => sendRegister(password))\n            .then(() => sendLogin(password))\n            .catch(error => console.error('[ERROR]', error));\n      }\n\n      if (config.utils['chat-messages'].enabled) {\n         console.log('[INFO] Started chat-messages module');\n         const messages = config.utils['chat-messages']['messages'];\n\n         if (config.utils['chat-messages'].repeat) {\n            const delay = config.utils['chat-messages']['repeat-delay'];\n            let i = 0;\n\n            let msg_timer = setInterval(() => {\n               bot.chat(`${messages[i]}`);\n\n               if (i + 1 === messages.length) {\n                  i = 0;\n               } else {\n                  i++;\n               }\n            }, delay * 1000);\n         } else {\n            messages.forEach((msg) => {\n               bot.chat(msg);\n            });\n         }\n      }\n\n      const pos = config.position;\n\n      if (config.position.enabled) {\n         console.log(\n            `\\x1b[32m[Afk Bot] Starting to move to target location (${pos.x}, ${pos.y}, ${pos.z})\\x1b[0m`\n         );\n         bot.pathfinder.setMovements(defaultMove);\n         bot.pathfinder.setGoal(new GoalBlock(pos.x, pos.y, pos.z));\n      }\n\n      if (config.utils['anti-afk'].enabled) {\n         bot.setControlState('jump', true);\n         if (config.utils['anti-afk'].sneak) {\n            bot.setControlState('sneak', true);\n         }\n      }\n   });\n\n   bot.on('goal_reached', () => {\n      console.log(\n         `\\x1b[32m[AfkBot] Bot arrived at the target location. ${bot.entity.position}\\x1b[0m`\n      );\n   });\n\n   bot.on('death', () => {\n      console.log(\n         `\\x1b[33m[AfkBot] Bot has died and was respawned at ${bot.entity.position}`,\n         '\\x1b[0m'\n      );\n   });\n\n   if (config.utils['auto-reconnect']) {\n      bot.on('end', () => {\n         setTimeout(() => {\n            createBot();\n         }, config.utils['auto-recconect-delay']);\n      });\n   }\n\n   bot.on('kicked', (reason) =>\n      console.log(\n         '\\x1b[33m',\n         `[AfkBot] Bot was kicked from the server. Reason: \\n${reason}`,\n         '\\x1b[0m'\n      )\n   );\n\n   bot.on('error', (err) =>\n      console.log(`\\x1b[31m[ERROR] ${err.message}`, '\\x1b[0m')\n   );\n}\n\ncreateBot();\n","size_bytes":5461}},"version":1}